import numpy as np  
import matplotlib.pyplot as plt  
from sklearn.datasets import fetch_lfw_people  
from sklearn.model_selec on import train_test_split  
from sklearn.preprocessing import LabelEncoder  
from tensorflow.keras.u ls import to_categorical  
from tensorflow.keras.models import Sequen al  
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Fla en, Dense, Dropout  
lfw_data = fetch_lfw_people(min_faces_per_person=70, resize=0.4)  
X = lfw_data.images  
y = lfw_data.target  
target_names = lfw_data.target_names  
n_classes = len(target_names)  
# Step 2: Preprocess the data  
X = X.reshape(-1, X.shape[1], X.shape[2], 1) / 255.0  
y = to_categorical(y, n_classes)  
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)  
model = Sequen al([  
    Conv2D(32, (3, 3), ac va on='relu', input_shape=X.shape[1:]),  
    MaxPooling2D(2, 2),  
    Conv2D(64, (3, 3), ac va on='relu'),  
    MaxPooling2D(2, 2),  
    Fla en(),  
    Dense(128, ac va on='relu'),  
    Dropout(0.5),  
    Dense(n_classes, ac va on='somax')  
])  
model.compile(opmizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])  
history = model.fit(X_train, y_train, epochs=10, batch_size=32, valida on_data=(X_test, y_test))  
test_loss, test_accuracy = model.evaluate(X_test, y_test)  
2117230020234 
print(f"Test Accuracy: {test_accuracy:.2f}")  
def predict_and_display(index):  
    sample = X_test[index].reshape(1, X.shape[1], X.shape[2], 1)  
    predic on = model.predict(sample)  
    predicted_label = target_names[np.argmax(predic on)]  
    actual_label = target_names[np.argmax(y_test[index])]  
    plt.imshow(X_test[index].reshape(X.shape[1], X.shape[2]), cmap='gray')  
    plt. tle(f"Predicted: {predicted_label}\nActual: {actual_label}")  
    plt.axis('off')  
    plt.show()  
predict_and_display(5)  
model.save("lfw_face_recogni on_cnn.h5")
